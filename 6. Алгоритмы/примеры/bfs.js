//–û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É (BFS) –¥–ª—è –≥—Ä–∞—Ñ–∞ (—Å–ø–∏—Å–∫–∏ —Å–º–µ–∂–Ω–æ—Å—Ç–∏)
// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º—ë–º –≥—Ä–∞—Ñ, —Ö—Ä–∞–Ω—è—â–∏–π—Å—è –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ (—Å–ª–æ–≤–∞—Ä—è) —Å–ø–∏—Å–∫–æ–≤ —Å–º–µ–∂–Ω–æ—Å—Ç–∏:
// –°–ª–æ–∂–Ω–æ—Å—Ç—å: ùëÇ(ùëâ+ùê∏), –≥–¥–µ ùëâ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, ùê∏ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä. –ï—Å–ª–∏ –≥—Ä–∞—Ñ ¬´–Ω–µ —Å–ª–∏—à–∫–æ–º –ø–ª–æ—Ç–Ω—ã–π¬ª, —ç—Ç–æ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø–æ—á—Ç–∏ ùëÇ(ùëõ) –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä.

/**
 * –û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É (BFS) –≤ –≥—Ä–∞—Ñ–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–∞–º–∏ —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
 * @param {Object} graph - –û–±—ä–µ–∫—Ç –≤–∏–¥–∞ { A: ['B','C'], B: [...], ... }
 * @param {string} start - –°—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞
 * @returns {string[]} –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥–∞ –≤–µ—Ä—à–∏–Ω
 */
function bfs(graph, start) {
    const visited = new Set();
    const queue = [start];
    const result = [];
  
    visited.add(start);
  
    while (queue.length > 0) {
      const vertex = queue.shift(); // –≤–∑—è–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏
      result.push(vertex);
  
      // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π
      for (const neighbor of graph[vertex]) {
        if (!visited.has(neighbor)) {
          visited.add(neighbor);
          queue.push(neighbor);
        }
      }
    }
  
    return result;
  }
  
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  const graph = {
    A: ['B', 'C'],
    B: ['D'],
    C: ['E'],
    D: ['F'],
    E: [],
    F: []
  };
  
  console.log(bfs(graph, 'A')); 
  // –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ['A', 'B', 'C', 'D', 'E', 'F']
  