// –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ (Merge)
// –°–ª–æ–∂–Ω–æ—Å—Ç—å: ùëÇ(ùëõ+ùëö), –≥–¥–µ ùëõ  –∏ ùëö  ‚Äî —Ä–∞–∑–º–µ—Ä—ã –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤, —á—Ç–æ –≤ —Å—É–º–º–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –ª–∏–Ω–µ–π–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

/**
 * –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
 * @param {number[]} arrA - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ A
 * @param {number[]} arrB - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ B
 * @returns {number[]} –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã A –∏ B –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
 */
function mergeSorted(arrA, arrB) {
    const result = [];
    let i = 0;
    let j = 0;
  
    // –ø–æ–∫–∞ –≤ –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
    while (i < arrA.length && j < arrB.length) {
      if (arrA[i] <= arrB[j]) {
        result.push(arrA[i]);
        i++;
      } else {
        result.push(arrB[j]);
        j++;
      }
    }
  
    // –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ arrA
    while (i < arrA.length) {
      result.push(arrA[i]);
      i++;
    }
  
    // –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ arrB
    while (j < arrB.length) {
      result.push(arrB[j]);
      j++;
    }
  
    return result;
  }
  
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  const sortedA = [1, 3, 5, 7];
  const sortedB = [2, 4, 6, 8];
  console.log(mergeSorted(sortedA, sortedB));
  // [1, 2, 3, 4, 5, 6, 7, 8]
  